name: Release Python

on:
  workflow_dispatch:
    inputs:
      # Latest commit to include with the release. If omitted, use the latest commit on the main branch.
      sha:
        description: Commit SHA
        type: string
      # Create the sdist and build the wheels, but do not publish to PyPI / GitHub.
      dry-run:
        description: Dry run
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# env:
#   PYTHON_VERSION: '3.11'

defaults:
  run:
    shell: bash

jobs:
  create-sdist:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        PYTHON_VERSION: ['3.11']

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install build twine wheel

      - name: Create source distribution
        run: |
          python -m build --sdist

      - name: Check README rendering for PyPI
        run: twine check dist/*

      - name: Test sdist
        run: |
          pip install --force-reinstall --verbose dist/*.tar.gz
          python -c 'from fastrdp import rdp'

      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist/*.tar.gz


  build-wheels:
    runs-on: ${{ matrix.os }}
    env:
      CIBW_SKIP: "*-musllinux_aarch64"
      CIBW_AFTER_BUILD: >-
        twine check {wheel} \
        && python -m pip install {wheel} \
        && python -c 'from fastrdp import rdp'
      # CIBW_TEST_REQUIRES: pytest
      # CIBW_TEST_COMMAND: "pytest {project}/tests"
      # Apple Silicon machines are not available for testing, so silence the
      # warning from cibuildwheel. Remove the skip when they're available.
      # CIBW_TEST_SKIP: "*-macosx_arm64"
      # Get C++17 support on Linux and macOS
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
      MACOSX_DEPLOYMENT_TARGET: "10.14"
    strategy:
      fail-fast: false
      matrix:
        PYTHON_VERSION: ["3.10", "3.11"]
        include:
          - os: ubuntu-latest
            cibw_archs: "x86_64"
          - os: ubuntu-latest
            cibw_archs: "aarch64"
          - os: windows-latest
            cibw_archs: "auto64"
          - os: macos-latest
            cibw_archs: "x86_64 arm64"

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.PYTHON_VERSION }}

      - name: Set up QEMU
        if: matrix.cibw_archs == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Python version for cibuildwheel
        run: |
          CIBW_PYTHON_VERSION=$(echo ${{ matrix.PYTHON_VERSION }} | sed "s/\.//")
          echo "Setting envvar CIBW_PYTHON_VERSION to $CIBW_PYTHON_VERSION"
          echo "CIBW_PYTHON_VERSION=$CIBW_PYTHON_VERSION" >> $GITHUB_ENV

      - name: Build wheels for Python ${{ matrix.PYTHON_VERSION }}
        uses: pypa/cibuildwheel@v2.8.1
        env:
          # Only build on CPython. 
          CIBW_BUILD: "cp${{ env.CIBW_PYTHON_VERSION }}-*"
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl
          if-no-files-found: error


  publish-to-pypi:
    needs: [create-sdist, build-wheels]
    environment:
      name: PyPI
      url: https://pypi.org/project/fastrdp
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Download sdist
        uses: actions/download-artifact@v3
        with:
          name: sdist
          path: dist

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Publish to PyPI
        if: inputs.dry-run == false
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true


  publish-to-github:
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: Download sdist
        uses: actions/download-artifact@v3
        with:
          name: sdist
          path: dist

      - name: Get version from pyproject.toml
        id: version
        run: |
          VERSION=$(grep -m 1 -oP 'version = "\K[^"]+' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        if: inputs.dry-run == false
        id: github-release
        uses: softprops/action-gh-release@v1
        with:
          name: fastrdp ${{ steps.version.outputs.version }}
          tag_name: v${{ steps.version.outputs.version }}
          files: dist/fastrdp-${{ steps.version.outputs.version }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
